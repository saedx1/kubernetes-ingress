name: Build OSS

on:
  workflow_call:
    inputs:
      platforms:
        required: true
        type: string
      image:
        required: true
        type: string
      tag:
        required: false
        type: string
      go-md5:
        required: true
        type: string
      base-image-md5:
        required: true
        type: string
      branch:
        required: true
        type: string
      authenticated:
        required: true
        type: boolean
      full-build:
        description: Always build base image
        type: boolean
        default: false
      ic-version:
        required: false
        type: string

defaults:
  run:
    shell: bash

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-24.04
    permissions:
      contents: read # for docker/build-push-action to read repo content
      id-token: write # for OIDC login to GCR
      packages: write # for docker/build-push-action to push to GHCR
      pull-requests: write # for scout report
    outputs:
      version: ${{ steps.meta.outputs.version }}
      image_digest: ${{ steps.build-push.outputs.digest }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ inputs.branch }}
          fetch-depth: 0

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@6fc4af4b145ae7821d527454aa9bd537d1f2dc5f # v2.1.7
        with:
          token_format: access_token
          workload_identity_provider: ${{ secrets.GCR_WORKLOAD_IDENTITY }}
          service_account: ${{ secrets.GCR_SERVICE_ACCOUNT }}
        if: ${{ inputs.authenticated }}

      - name: Login to GCR
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          registry: gcr.io
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}
        if: ${{ inputs.authenticated }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@369eb591f429131d6889c46b94e711f089e6ca96 # v5.6.1
        with:
          context: workflow
          images: |
            name=gcr.io/f5-gcs-7899-ptg-ingrss-ctlr/dev/nginx-ic/nginx-ingress
          flavor: |
            suffix=${{ contains(inputs.image, 'ubi') && '-ubi' || '' }}${{ contains(inputs.image, 'alpine') && '-alpine' || '' }}
          tags: |
            type=raw,value=${{ inputs.tag }}
          labels: |
            org.opencontainers.image.description=NGINX Ingress Controller for Kubernetes
            io.artifacthub.package.readme-url=https://raw.githubusercontent.com/nginxinc/kubernetes-ingress/main/README.md
            io.artifacthub.package.logo-url=https://docs.nginx.com/nginx-ingress-controller/images/icons/NGINX-Ingress-Controller-product-icon.svg
            io.artifacthub.package.maintainers=[{"name":"NGINX Inc","email":"kubernetes@nginx.com"}]
            io.artifacthub.package.license=Apache-2.0
            io.artifacthub.package.keywords=kubernetes,ingress,nginx,controller
        env:
          DOCKER_METADATA_ANNOTATIONS_LEVELS: manifest,index

      - name: Set base name variable
        id: base_name
        run: |
          base_image="gcr.io/f5-gcs-7899-ptg-ingrss-ctlr/dev/nginx-ic-base/oss:${{ inputs.base-image-md5 }}-${{ inputs.image }}"
          echo "image=${base_image}" >> $GITHUB_OUTPUT

      - name: Check if images exist
        id: images_exist
        run: |
          if docker manifest inspect ${{ steps.base_name.outputs.image }}; then
            echo "base_exists=true" >> $GITHUB_OUTPUT
          fi
          if docker manifest inspect ${{ steps.meta.outputs.tags }}; then
            echo "target_exists=true" >> $GITHUB_OUTPUT
          fi
        if: ${{ inputs.authenticated && ! inputs.full-build }}

      - name: Setup QEMU
        uses: docker/setup-qemu-action@49b3bc8e6bdd4a60e6116a5414239cba5943d3cf # v3.2.0
        with:
          platforms: arm,arm64,ppc64le,s390x
        if: ${{ steps.images_exist.outputs.base_exists != 'true' || steps.images_exist.outputs.target_exists != 'true' }}

      - name: Docker Buildx
        uses: docker/setup-buildx-action@6524bf65af31da8d45b59e8c27de4bd072b392f5 # v3.8.0
        if: ${{ steps.images_exist.outputs.base_exists != 'true' || steps.images_exist.outputs.target_exists != 'true' }}

      - name: Build Base Container
        uses: docker/build-push-action@48aba3b46d1b1fec4febb7c5d0c644b249a11355 # v6.10.0
        with:
          file: build/Dockerfile
          context: "."
          cache-to: type=gha,scope=${{ inputs.image }},mode=max
          target: common
          tags: ${{ steps.base_name.outputs.image }}
          platforms: ${{ inputs.platforms }}
          pull: true
          push: true
          no-cache: true
          build-args: |
            BUILD_OS=${{ inputs.image }}
            IC_VERSION=${{ inputs.ic-version && inputs.ic-version || steps.meta.outputs.version }}
        if: ${{ inputs.authenticated && steps.images_exist.outputs.base_exists != 'true' }}

      - name: Debug values
        run: |
          echo "authenticated: ${{ inputs.authenticated }}"
          echo "base_exists: ${{ steps.images_exist.outputs.base_exists }}"
          echo "target_exists: ${{ steps.images_exist.outputs.target_exists }}"
          echo "full-build: ${{ inputs.full-build }}"

      - name: Fetch Cached Artifacts
        uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
        with:
          path: ${{ github.workspace }}/dist
          key: nginx-ingress-${{ inputs.go-md5 }}
          fail-on-cache-miss: true
        if: ${{ steps.images_exist.outputs.base_exists != 'true' || steps.images_exist.outputs.target_exists != 'true' }}

      - name: Build Docker image
        uses: docker/build-push-action@48aba3b46d1b1fec4febb7c5d0c644b249a11355 # v6.10.0
        id: build-push
        with:
          file: build/Dockerfile
          context: "."
          cache-from: type=gha,scope=${{ inputs.image }}
          cache-to: type=gha,scope=${{ inputs.image }},mode=max
          target: goreleaser${{ inputs.authenticated && '-prebuilt' || '' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}
          platforms: ${{ inputs.platforms }}
          load: false
          push: ${{ inputs.authenticated }}
          pull: true
          sbom: ${{ inputs.authenticated }}
          provenance: false
          build-args: |
            BUILD_OS=${{ inputs.image }}
            ${{ inputs.authenticated && format('PREBUILT_BASE_IMG={0}', steps.base_name.outputs.image) }}
            IC_VERSION=${{ inputs.ic-version && inputs.ic-version || steps.meta.outputs.version }}
        if: ${{ steps.images_exist.outputs.base_exists != 'true' || steps.images_exist.outputs.target_exists != 'true' }}

      - name: Make directory for security scan results
        run: |
          mkdir -p "${{ inputs.image }}-results/"
        if: ${{ inputs.authenticated && steps.build-push.conclusion == 'success' }}

      # - name: Run Trivy vulnerability scanner
      #   uses: aquasecurity/trivy-action@6e7b7d1fd3e4fef0c5fa8cce1229c54b2c9bd0d8 # 0.24.0
      #   with:
      #     image-ref: ${{ steps.meta.outputs.tags }}
      #     format: "sarif"
      #     output: "${{ inputs.image }}-results/trivy.sarif"
      #     ignore-unfixed: "true"
      #   if: ${{ inputs.authenticated && steps.build-push.conclusion == 'success' }}

      - name: DockerHub Login for Docker Scout
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
        if: ${{ inputs.authenticated && steps.build-push.conclusion == 'success' }}

      - name: Run Docker Scout vulnerability scanner
        id: docker-scout
        uses: docker/scout-action@b23590dc1e4d09febc00cfcbc51e9e8c0f7ee9f3 # v1.16.1
        with:
          command: cves
          image: ${{ steps.meta.outputs.tags }}
          ignore-base: true
          sarif-file: "${{ inputs.image }}-results/scout.sarif"
          write-comment: false
          github-token: ${{ secrets.GITHUB_TOKEN }} # to be able to write the comment
          summary: true
        if: ${{ inputs.authenticated && steps.build-push.conclusion == 'success' }}
